<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eiroe&#39;s blog</title>
  
  <subtitle>记录走过的每一步</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://eighroe.github.io/"/>
  <updated>2020-05-31T09:56:54.926Z</updated>
  <id>http://eighroe.github.io/</id>
  
  <author>
    <name>Eiroe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何运行vue项目</title>
    <link href="http://eighroe.github.io/2020/05/31/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cvue%E9%A1%B9%E7%9B%AE/"/>
    <id>http://eighroe.github.io/2020/05/31/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cvue%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-05-31T06:04:15.000Z</published>
    <updated>2020-05-31T09:56:54.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何运行vue项目"><a href="#如何运行vue项目" class="headerlink" title="如何运行vue项目"></a>如何运行vue项目</h1><p><strong>安装node.js</strong></p><p>从<a href="https://nodejs.org/en/http://" target="_blank" rel="noopener">node.js官网</a>下载并安装node，安装过程很简单，一路“下一步”就可以了（傻瓜式安装）。</p><p>安装完成之后，打开命令行工具，输入 node -v，如下图，如果出现相应的版本号，则说明安装成功。</p><p><img src="/2020/05/31/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cvue%E9%A1%B9%E7%9B%AE/11.jpg" alt="img"></p><p>npm包管理器，是集成在node中的，所以，直接输入 npm -v就会如下图所示，显示出npm的版本信息。</p><p><img src="/2020/05/31/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cvue%E9%A1%B9%E7%9B%AE/12.jpg" alt="img"></p><p>OK！node环境已经安装完成，npm包管理器也有了。由于有些npm有些资源被屏蔽或者是国外资源的原因，经常会导致用npm安装依赖包的时候失败，所有我还需要npm的国内镜像—cnpm。</p><h2 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h2><p>在命令行中输入 npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org" target="_blank" rel="noopener">http://registry.npm.taobao.org</a> 然后等待，安装完成如下图。</p><p><img src="/2020/05/31/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cvue%E9%A1%B9%E7%9B%AE/13.jpg" alt="img"></p><p>完成之后，我们就可以用cnpm代替npm来安装依赖包了。如果想进一步了解cnpm的，查看<a href="https://npm.taobao.org/http://" target="_blank" rel="noopener">淘宝npm镜像官网</a>。</p><h2 id="安装vue-cli脚手架构建工具"><a href="#安装vue-cli脚手架构建工具" class="headerlink" title="安装vue-cli脚手架构建工具"></a>安装vue-cli脚手架构建工具</h2><p>在命令行中运行命令 cnpm install -g vue-cli ，然后等待安装完成。(注意，这里使用cnpm来替代npm，不然速度超级慢，会导致卡在那)</p><p>通过以上三部，我们需要准备的环境和工具都准备好了，接下来就开始使用vue-cli来构建项目。</p><h2 id="用vue-cli构建项目"><a href="#用vue-cli构建项目" class="headerlink" title="用vue-cli构建项目"></a>用vue-cli构建项目</h2><p>要创建项目，首先我们要选定目录，然后再命令行中把目录转到选定的目录。在这里，我选择桌面来存放新建的项目，则我们需要先把目录cd到桌面，如下图。</p><p><img src="/2020/05/31/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cvue%E9%A1%B9%E7%9B%AE/14.jpg" alt="img"></p><p>在桌面目录下，在命令行中运行命令 vue init webpack firstVue 。解释一下这个命令，这个命令的意思是初始化一个项目，其中webpack是构建工具，也就是整个项目是基于webpack的。其中firstVue是整个项目文件夹的名称，这个文件夹会自动生成在你指定的目录中（我的实例中，会在桌面生成该文件夹），如下图。</p><p><img src="/2020/05/31/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cvue%E9%A1%B9%E7%9B%AE/15.jpg" alt="img"></p><p>运行初始化命令的时候回让用户输入几个基本的选项，如项目名称，描述，作者等信息，如果不想填直接回车默认就好。</p><p><img src="/2020/05/31/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cvue%E9%A1%B9%E7%9B%AE/16.jpg" alt="img"></p><p>打开firstVue文件夹，项目文件如下所示。</p><p><img src="/2020/05/31/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cvue%E9%A1%B9%E7%9B%AE/17.jpg" alt="img"></p><p>这就是整个项目的目录结构，其中，我们主要在src目录中做修改。这个项目现在还只是一个结构框架，整个项目需要的依赖资源都还没有安装，如下图。</p><p><img src="/2020/05/31/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cvue%E9%A1%B9%E7%9B%AE/18.jpg" alt="img"></p><h2 id="安装项目所需的依赖"><a href="#安装项目所需的依赖" class="headerlink" title="安装项目所需的依赖"></a>安装项目所需的依赖</h2><p>要安装依赖包，首先cd到项目文件夹（firstVue文件夹），然后运行命令 cnpm install ，等待安装。</p><p><img src="/2020/05/31/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cvue%E9%A1%B9%E7%9B%AE/19.jpg" alt="img"></p><p>安装完成之后，会在我们的项目目录firstVue文件夹中多出一个node_modules文件夹，这里边就是我们项目需要的依赖包资源。</p><p><img src="/2020/05/31/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cvue%E9%A1%B9%E7%9B%AE/20.jpg" alt="img"></p><p>安装完依赖包之后，就可以运行整个项目了。</p><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>在项目目录中，运行命令 npm run dev ，会用热加载的方式运行我们的应用，热加载可以让我们在修改完代码后不用手动刷新浏览器就能实时看到修改后的效果。</p><p><img src="/2020/05/31/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cvue%E9%A1%B9%E7%9B%AE/21.jpg" alt="img"></p><p>这里简单介绍下 npm run dev 命令，其中的“run”对应的是package.json文件中，scripts字段中的dev，也就是 node build/dev-server.js命令的一个快捷方式。</p><p>项目运行成功后，浏览器会自动打开localhost:8080（如果浏览器没有自动打开，可以手动输入）。运行成功后，会看到如下所示的界面。</p><p><img src="/2020/05/31/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cvue%E9%A1%B9%E7%9B%AE/22.jpg" alt="img"></p><p>如果看到这个页面，说明项目运行成功了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何运行vue项目&quot;&gt;&lt;a href=&quot;#如何运行vue项目&quot; class=&quot;headerlink&quot; title=&quot;如何运行vue项目&quot;&gt;&lt;/a&gt;如何运行vue项目&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;安装node.js&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从&lt;a href=&quot;https://nodejs.org/en/http://&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;node.js官网&lt;/a&gt;下载并安装node，安装过程很简单，一路“下一步”就可以了（傻瓜式安装）。&lt;/p&gt;
&lt;p&gt;安装完成之后，打开命令行工具，输入 node -v，如下图，如果出现相应的版本号，则说明安装成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/05/31/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cvue%E9%A1%B9%E7%9B%AE/11.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;npm包管理器，是集成在node中的，所以，直接输入 npm -v就会如下图所示，显示出npm的版本信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/05/31/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cvue%E9%A1%B9%E7%9B%AE/12.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;OK！node环境已经安装完成，npm包管理器也有了。由于有些npm有些资源被屏蔽或者是国外资源的原因，经常会导致用npm安装依赖包的时候失败，所有我还需要npm的国内镜像—cnpm。&lt;/p&gt;
&lt;h2 id=&quot;安装cnpm&quot;&gt;&lt;a href=&quot;#安装cnpm&quot; class=&quot;headerlink&quot; title=&quot;安装cnpm&quot;&gt;&lt;/a&gt;安装cnpm&lt;/h2&gt;&lt;p&gt;在命令行中输入 npm install -g cnpm –registry=&lt;a href=&quot;http://registry.npm.taobao.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://registry.npm.taobao.org&lt;/a&gt; 然后等待，安装完成如下图。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://eighroe.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://eighroe.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>nodeJS、npm的安装和配置</title>
    <link href="http://eighroe.github.io/2020/05/30/nodeJS%E3%80%81npm%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>http://eighroe.github.io/2020/05/30/nodeJS%E3%80%81npm%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</id>
    <published>2020-05-30T09:18:01.000Z</published>
    <updated>2020-05-30T09:48:09.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nodeJS、npm的安装和配置"><a href="#nodeJS、npm的安装和配置" class="headerlink" title="nodeJS、npm的安装和配置"></a>nodeJS、npm的安装和配置</h1><h3 id="一、理清关系"><a href="#一、理清关系" class="headerlink" title="一、理清关系"></a>一、理清关系</h3><p>首先是自己遇到的几个问题：</p><p>前提是我现在下载了一个VUE相关的代码，想运行起来，然后查了各种相关的东西，需要什么npm webpack node。。。总之有点混乱，于是先整理了几个问题，如下：</p><p>1、webpack和node的关系是什么？</p><p>2、如果我只想用npm，不想安装node，可以吗？</p><p>3、vue和webpack npm的关系又是什么？</p><p>依赖于这三个问题，来理清一下这三者的最终关系。</p><p>（1）vue.js是前端的一个框架，写出来的都是一个个vue文件，这些文件是浏览器不识别的文件，所以需要以来一种工具把vue文件转换为浏览器可识别的文件。</p><p>（2）OK，webpack就是这个工具，它可以将这些文件进行打包，完成这个功能。</p><p>（3）webpack打包需要依赖npm，而npm是依赖于Node.js环境的。</p><p>所以，总结下来就是：webpack依赖node.js环境，将vue文件打包为浏览器可以直接识别的文件，在浏览器里面运行。</p><h3 id="二、nodeJs、npm的安装和配置"><a href="#二、nodeJs、npm的安装和配置" class="headerlink" title="二、nodeJs、npm的安装和配置"></a>二、nodeJs、npm的安装和配置</h3><p>下面的内容是参考此链接：<a href="https://jingyan.baidu.com/article/48b37f8dd141a646488bc.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/48b37f8dd141a646488bc.html</a></p><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。 Node.js 的使用包管理器 npm来管理所有模块的安装、配置、删除等操作，使用起来非常方便，但是想要配置好npm的使用环境还是稍微有点复杂，下面跟着我一起来学习在windows系统上配置NodeJS和NPM吧。 </p><h2 id="安装NodeJS和NPM"><a href="#安装NodeJS和NPM" class="headerlink" title="安装NodeJS和NPM"></a>安装NodeJS和NPM</h2><ol><li><p>1</p><p>打开NodeJS的官网，默认的情况主页就提供了Windows版本的下载链接，我们下载8.12.0 LTS版，LTS代表长期支持版本，一般新手建议使用这个版本，因为这个版本使用的人最多，出问题能找到解决方案的概率较大。如下图所示：</p><p><img src="/2020/05/30/nodeJS%E3%80%81npm%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/1.png" alt="img"></p></li><li><p>2</p><p>下载完成后双击下载好的node-v8.12.0-x64文件开始安装，点击next进入下一步，勾选同意协议，继续下一步。然后选择安装的位置，默认是在C盘，改成D盘安装，这是个好习惯，建议保持。然后进入模块配置步骤。</p><p>一路next</p></li><li><p>3</p><p>这一步是选择安装哪些模块，默认是全部安装，对于新手来说建议全部安装。点开那个add path选项前面的+号，我们看到，会主动把NodeJS和NPM这两个模块的命令路径添加到系统路径里，对于我们来说就非常方便了。点击next继续下一步，然后确认信息，点击Install开始安装，然后程序就开始复制文件等一系列步骤。一直到安装完毕。4</p></li><li><p>4</p><p>安装完毕后点击finish结束安装进程，然后在开始搜索栏输入nodejs，点运行。输入cmd后敲回车，在打开的命令行界面，依次输入命令：</p><p>node -v</p><p>npm -v</p><p>如果正确输出版本号，说明我们的NodeJS和NPM就安装好了，如下图所示：</p><p><img src="/2020/05/30/nodeJS%E3%80%81npm%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/2.png" alt="img"></p><p>END</p></li></ol><h2 id="配置NodeJS和NPM"><a href="#配置NodeJS和NPM" class="headerlink" title="配置NodeJS和NPM"></a>配置NodeJS和NPM</h2><ol><li><p>1</p><p>并不是说NodeJS和NPM安装好了以后就能直接使用了，这也是新手经常犯的一个错误之一。因为默认情况下，NPM安装的模块并不会安装到NodeJS的程序目录，比如上面安装的时候我们设置的D:\Program Files\nodejs\目录。</p></li><li><p>3</p><p>这里我们要分两步，第一步修改NPM的缓存目录和全局目录路径，将对应的模块目录改到D盘nodejs的安装目录，第二步是配置npm和nodejs的环境变量，这样nodejs才能正确地调用对应的模块。</p><p>我们先来做第一步，在D盘nodejs目录下创建两个目录，分别是node_cache和node_global，这是用来放安装过程的缓存文件以及最终的模块配置位置。配置完成后，执行下面这两个命令：</p><p>npm config set prefix “D:\Program Files\nodejs\node_global”</p><p>npm config set cache “D:\Program Files\nodejs\node_cache”</p><p>将npm的全局模块目录和缓存目录配置到我们刚才创建的那两个目录：</p></li><li><p>4</p><p>然后我们打开cmd命令行界面，在使用命令安装cluster模块，命令如下：</p><p>npm install cluster -g</p><p>然后打开刚才创建的node_global目录，可以看到此时cluster目录就安装到这个目录底下了。</p><p><img src="/2020/05/30/nodeJS%E3%80%81npm%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/3.png" alt="img"></p></li></ol><ol start="4"><li><p>5</p><p>然后我们来配置npm的环境变量和nodejs的环境变量。在计算机图标上点右键，选属性，然后点击高级系统配置，弹出来的新窗口右下角有个环境路径，点击去，就能看到环境路径的配置界面，我们点击新建。(注意：该处是新建用户变量，而不是系统变量)  然后在弹出来的窗口里，变量名填：NODE_PATH</p><p>变量值填：D:\Program Files\nodejs\node_modules\</p><p>填写好后点确定，然后就能看到我们配置好的NPM环境路径。</p><p><img src="/2020/05/30/nodeJS%E3%80%81npm%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/4.png" alt="img"></p></li><li><p>6</p><p>此时还需要修改一些nodejs默认的模块调用路径，因为模块的安装位置变了，如果nodejs的命令还到原来的位置去找，肯定是找不到安装的模块了。我们在环境变量窗口，选择Path，然后点击右下角的编辑，然后选择npm那个。点击右边的编辑，将其修改为：D:\program\node\node_global\</p><p>然后点确定，保存这个配置。</p></li><li><p>7</p><p>这个时候所有的配置工作才算完成了，然后打开一个新的cmd窗口。先输入命令：</p><p>node</p><p>进入nodejs的交互式命令控制台，然后输入：</p><p>require(‘cluster’)</p><p>如果能正常输出cluster模块的信息，说明上面的所有配置就算生效了。</p><p><img src="/2020/05/30/nodeJS%E3%80%81npm%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/5.png" alt="img"></p></li><li><p>8</p><p>我们还需要做的最后一个工作是，将npm的模块下载仓库从默认的国外站点改为国内的站点，这样下载模块的速度才能比较快，只需要一个命令即可，命令是：</p><p>npm –registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> install cluster</p><p>上面的命令是临时使用国内一家npm源的地址来安装cluster模块。从下面图中可以看到，速度非常快。只用了不到0.8秒。而我们上面第一次安装的时候用了差不多3秒多，速度快了3倍多。</p><p> <img src="/2020/05/30/nodeJS%E3%80%81npm%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/6.png" alt="img"></p><p>如果想一直使用这个源的地址，那么可以使用下面这个命令来配置。</p><p>npm install -g cnpm –registry=registry_url</p><p>registry_url指的是国内提供的一些npm仓库地址，常用的有：</p><p><a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p><p><a href="http://r.cnpmjs.org/" target="_blank" rel="noopener">http://r.cnpmjs.org/</a></p><p>这两个都可以使用。如下面第二张图所示，配置好国内源后，安装一个较大的模块express，只用了不到6秒多一点，速度提升还是非常可观的。至此，nodejs和npm在windows上的配置就全部完毕。</p><p>如何运行vue项目：</p><p>参考：<a href="https://www.cnblogs.com/pengjunhao/p/6762141.html" target="_blank" rel="noopener">https://www.cnblogs.com/pengjunhao/p/6762141.html</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;nodeJS、npm的安装和配置&quot;&gt;&lt;a href=&quot;#nodeJS、npm的安装和配置&quot; class=&quot;headerlink&quot; title=&quot;nodeJS、npm的安装和配置&quot;&gt;&lt;/a&gt;nodeJS、npm的安装和配置&lt;/h1&gt;&lt;h3 id=&quot;一、理清关系&quot;&gt;&lt;a href=&quot;#一、理清关系&quot; class=&quot;headerlink&quot; title=&quot;一、理清关系&quot;&gt;&lt;/a&gt;一、理清关系&lt;/h3&gt;&lt;p&gt;首先是自己遇到的几个问题：&lt;/p&gt;
&lt;p&gt;前提是我现在下载了一个VUE相关的代码，想运行起来，然后查了各种相关的东西，需要什么npm webpack node。。。总之有点混乱，于是先整理了几个问题，如下：&lt;/p&gt;
&lt;p&gt;1、webpack和node的关系是什么？&lt;/p&gt;
&lt;p&gt;2、如果我只想用npm，不想安装node，可以吗？&lt;/p&gt;
&lt;p&gt;3、vue和webpack npm的关系又是什么？&lt;/p&gt;
&lt;p&gt;依赖于这三个问题，来理清一下这三者的最终关系。&lt;/p&gt;
&lt;p&gt;（1）vue.js是前端的一个框架，写出来的都是一个个vue文件，这些文件是浏览器不识别的文件，所以需要以来一种工具把vue文件转换为浏览器可识别的文件。&lt;/p&gt;
&lt;p&gt;（2）OK，webpack就是这个工具，它可以将这些文件进行打包，完成这个功能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="-node配置" scheme="http://eighroe.github.io/categories/node%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="环境配置" scheme="http://eighroe.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>如何查看某个端口被谁占用，结束进程</title>
    <link href="http://eighroe.github.io/2020/05/27/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E6%9F%90%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%A2%AB%E8%B0%81%E5%8D%A0%E7%94%A8%EF%BC%8C%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B/"/>
    <id>http://eighroe.github.io/2020/05/27/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E6%9F%90%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%A2%AB%E8%B0%81%E5%8D%A0%E7%94%A8%EF%BC%8C%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B/</id>
    <published>2020-05-26T17:02:13.000Z</published>
    <updated>2020-05-30T09:29:25.581Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何查看某个端口被谁占用，结束进程"><a href="#如何查看某个端口被谁占用，结束进程" class="headerlink" title="如何查看某个端口被谁占用，结束进程"></a>如何查看某个端口被谁占用，结束进程</h1><h2 id="1-开始—-gt-运行—-gt-cmd，或者是window-R组合键，调出命令窗口"><a href="#1-开始—-gt-运行—-gt-cmd，或者是window-R组合键，调出命令窗口" class="headerlink" title="1.开始—-&gt;运行—-&gt;cmd，或者是window+R组合键，调出命令窗口"></a>1.开始—-&gt;运行—-&gt;cmd，或者是window+R组合键，调出命令窗口</h2><p><img src="/2020/05/27/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E6%9F%90%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%A2%AB%E8%B0%81%E5%8D%A0%E7%94%A8%EF%BC%8C%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B/1.png" alt="1"></p><h2 id="2-输入命令：netstat-ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是9010，首先找到它。"><a href="#2-输入命令：netstat-ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是9010，首先找到它。" class="headerlink" title="2.输入命令：netstat -ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是9010，首先找到它。"></a>2.输入命令：netstat -ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是9010，首先找到它。</h2><p><img src="/2020/05/27/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E6%9F%90%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%A2%AB%E8%B0%81%E5%8D%A0%E7%94%A8%EF%BC%8C%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B/4.png" alt="2"></p><h2 id="3-查看被占用端口对应的PID，输入命令：netstat-aon-findstr-“9010”，回车，记下最后一位数字，即PID-这里是2900。"><a href="#3-查看被占用端口对应的PID，输入命令：netstat-aon-findstr-“9010”，回车，记下最后一位数字，即PID-这里是2900。" class="headerlink" title="3.查看被占用端口对应的PID，输入命令：netstat -aon|findstr “9010”，回车，记下最后一位数字，即PID,这里是2900。"></a>3.查看被占用端口对应的PID，输入命令：netstat -aon|findstr “9010”，回车，记下最后一位数字，即PID,这里是2900。</h2><h2 id="4-继续输入tasklist-findstr-“2900”，回车，查看是哪个进程或者程序占用了2900端口，结果是：lghub-agent-exe"><a href="#4-继续输入tasklist-findstr-“2900”，回车，查看是哪个进程或者程序占用了2900端口，结果是：lghub-agent-exe" class="headerlink" title="4.继续输入tasklist|findstr “2900”，回车，查看是哪个进程或者程序占用了2900端口，结果是：lghub_agent.exe"></a>4.继续输入tasklist|findstr “2900”，回车，查看是哪个进程或者程序占用了2900端口，结果是：lghub_agent.exe</h2><p><img src="/2020/05/27/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E6%9F%90%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%A2%AB%E8%B0%81%E5%8D%A0%E7%94%A8%EF%BC%8C%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B/3.png" alt="3"></p><h2 id="5-结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill-f-t-im-lghub-agent-exe"><a href="#5-结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill-f-t-im-lghub-agent-exe" class="headerlink" title="5.结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill /f /t /im lghub_agent.exe"></a>5.结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill /f /t /im lghub_agent.exe</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何查看某个端口被谁占用，结束进程&quot;&gt;&lt;a href=&quot;#如何查看某个端口被谁占用，结束进程&quot; class=&quot;headerlink&quot; title=&quot;如何查看某个端口被谁占用，结束进程&quot;&gt;&lt;/a&gt;如何查看某个端口被谁占用，结束进程&lt;/h1&gt;&lt;h2 id=&quot;1-开始—-gt-运行—-gt-cmd，或者是window-R组合键，调出命令窗口&quot;&gt;&lt;a href=&quot;#1-开始—-gt-运行—-gt-cmd，或者是window-R组合键，调出命令窗口&quot; class=&quot;headerlink&quot; title=&quot;1.开始—-&amp;gt;运行—-&amp;gt;cmd，或者是window+R组合键，调出命令窗口&quot;&gt;&lt;/a&gt;1.开始—-&amp;gt;运行—-&amp;gt;cmd，或者是window+R组合键，调出命令窗口&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2020/05/27/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E6%9F%90%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%A2%AB%E8%B0%81%E5%8D%A0%E7%94%A8%EF%BC%8C%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B/1.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-输入命令：netstat-ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是9010，首先找到它。&quot;&gt;&lt;a href=&quot;#2-输入命令：netstat-ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是9010，首先找到它。&quot; class=&quot;headerlink&quot; title=&quot;2.输入命令：netstat -ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是9010，首先找到它。&quot;&gt;&lt;/a&gt;2.输入命令：netstat -ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是9010，首先找到它。&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2020/05/27/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E6%9F%90%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%A2%AB%E8%B0%81%E5%8D%A0%E7%94%A8%EF%BC%8C%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B/4.png&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-查看被占用端口对应的PID，输入命令：netstat-aon-findstr-“9010”，回车，记下最后一位数字，即PID-这里是2900。&quot;&gt;&lt;a href=&quot;#3-查看被占用端口对应的PID，输入命令：netstat-aon-findstr-“9010”，回车，记下最后一位数字，即PID-这里是2900。&quot; class=&quot;headerlink&quot; title=&quot;3.查看被占用端口对应的PID，输入命令：netstat -aon|findstr “9010”，回车，记下最后一位数字，即PID,这里是2900。&quot;&gt;&lt;/a&gt;3.查看被占用端口对应的PID，输入命令：netstat -aon|findstr “9010”，回车，记下最后一位数字，即PID,这里是2900。&lt;/h2&gt;&lt;h2 id=&quot;4-继续输入tasklist-findstr-“2900”，回车，查看是哪个进程或者程序占用了2900端口，结果是：lghub-agent-exe&quot;&gt;&lt;a href=&quot;#4-继续输入tasklist-findstr-“2900”，回车，查看是哪个进程或者程序占用了2900端口，结果是：lghub-agent-exe&quot; class=&quot;headerlink&quot; title=&quot;4.继续输入tasklist|findstr “2900”，回车，查看是哪个进程或者程序占用了2900端口，结果是：lghub_agent.exe&quot;&gt;&lt;/a&gt;4.继续输入tasklist|findstr “2900”，回车，查看是哪个进程或者程序占用了2900端口，结果是：lghub_agent.exe&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2020/05/27/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E6%9F%90%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%A2%AB%E8%B0%81%E5%8D%A0%E7%94%A8%EF%BC%8C%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B/3.png&quot; alt=&quot;3&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill-f-t-im-lghub-agent-exe&quot;&gt;&lt;a href=&quot;#5-结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill-f-t-im-lghub-agent-exe&quot; class=&quot;headerlink&quot; title=&quot;5.结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill /f /t /im lghub_agent.exe&quot;&gt;&lt;/a&gt;5.结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill /f /t /im lghub_agent.exe&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="ceshi" scheme="http://eighroe.github.io/tags/ceshi/"/>
    
  </entry>
  
  <entry>
    <title>hexo本地图片导入</title>
    <link href="http://eighroe.github.io/2020/04/13/hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E5%AF%BC%E5%85%A5/"/>
    <id>http://eighroe.github.io/2020/04/13/hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E5%AF%BC%E5%85%A5/</id>
    <published>2020-04-12T17:02:13.000Z</published>
    <updated>2020-05-27T10:06:51.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图片测试"><a href="#图片测试" class="headerlink" title="图片测试"></a>图片测试</h2><p><img src="/2020/04/13/hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E5%AF%BC%E5%85%A5/2.png" alt="代码"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;图片测试&quot;&gt;&lt;a href=&quot;#图片测试&quot; class=&quot;headerlink&quot; title=&quot;图片测试&quot;&gt;&lt;/a&gt;图片测试&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2020/04/13/hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E5%AF%BC%E5%85%A5/2.png&quot; alt=&quot;代码&quot;&gt;&lt;/p&gt;

    
    </summary>
    
    
    
      <category term="ceshi" scheme="http://eighroe.github.io/tags/ceshi/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://eighroe.github.io/2020/04/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://eighroe.github.io/2020/04/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-04-12T15:41:55.000Z</published>
    <updated>2020-05-17T14:12:23.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容</p><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容 </p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;p&gt;内容&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;第二章&quot;&gt;&lt;a href=&quot;#第二章&quot; class=&quot;headerlink&quot; title=&quot;第二章&quot;&gt;&lt;/a&gt;第二章&lt;/h2&gt;&lt;p&gt;内容 &lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.baidu.com&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
    
      <category term="ceshi" scheme="http://eighroe.github.io/tags/ceshi/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://eighroe.github.io/2020/04/12/hello-world/"/>
    <id>http://eighroe.github.io/2020/04/12/hello-world/</id>
    <published>2020-04-12T14:13:51.301Z</published>
    <updated>2020-05-17T14:10:13.089Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="default" scheme="http://eighroe.github.io/tags/default/"/>
    
  </entry>
  
</feed>
